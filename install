#!/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby
# A lot of this was copied from the homebrew install script
require 'open3'

SSH_DIR = "#{ENV["HOME"]}/.ssh".freeze
PROJECT_DIR = "#{ENV["HOME"]}/Projects".freeze
CONFIG_DIR = "#{ENV["HOME"]}/Projects/dotfiles".freeze
HB="https://raw.githubusercontent.com/Homebrew/install/master/install".freeze


# Name this computer
# echo ""
# echo "Would you like to set your computer name (as done via System Preferences >> Sharing)?  (y/n)"
# read -r response
# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
#   echo "What would you like it to be?"
#   read COMPUTER_NAME
#   sudo scutil --set ComputerName $COMPUTER_NAME
#   sudo scutil --set HostName $COMPUTER_NAME
#   sudo scutil --set LocalHostName $COMPUTER_NAME
#   sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string $COMPUTER_NAME
# fi

module Tty
    module_function

    def blue
        bold 34
    end

    def red
        bold 31
    end

    def reset
        escape 0
    end

    def bold(n = 39)
        escape "1;#{n}"
    end

    def underline
        escape "4;39"
    end

    def escape(n)
        "\033[#{n}m" if STDOUT.tty?
    end

end

class Array
    def shell_s
        cp = dup
        first = cp.shift
        cp.map { |arg| arg.gsub " ", "\\ " }.unshift(first).join(" ")
    end
end

def ohai(*args)
    puts "#{Tty.blue}==>#{Tty.bold} #{args.shell_s}#{Tty.reset}"
end

def warn(warning)
    puts "#{Tty.red}Warning#{Tty.reset}: #{warning.chomp}"
end

def capture_system(*args)
    stdout, stderr, status = Open3.capture3(*args)
    abort "Failed during: #{args.shell_s}" unless status
    stdout
end

def system(*args)
    abort "Failed during: #{args.shell_s}" unless Kernel.system(*args)
end

def run(*args)
    return Kernel.system(*args)
end

def sudo(*args)
    args.unshift("-A") unless ENV["SUDO_ASKPASS"].nil?
    ohai "/usr/bin/sudo", *args
    system "/usr/bin/sudo", *args
end

class LPassInterface

    def provision_sshkey(id,name=nil)
        result = capture_system 'lpass', 'show', id
        hash = {}
        result.scan(/^(?<=\n)([A-Z ]+):\s+(.*?)(?=\n[A-Z ]+:|\Z)/mi) do |match|
            hash[match[0]] = match[1]
        end
        name = "#{name}_rsa" if name
        pri = File.join(SSH_DIR,name || 'id_rsa')
        pub = File.join(SSH_DIR,(name || 'id_rsa') + '.pub')
        File.open(pri, 'w') { |file| file.write(hash["Private Key"] + "\n") }
        File.open(pub, 'w') { |file| file.write(hash["Public Key"] + "\n") }
        File.chmod(0644,pub)
        File.chmod(0600,pri)
        system 'ssh-add',"-qK", File.join(Dir.home,'.ssh',name || 'id_rsa')
    end

    def ssh_config(id)
        #this should be pulled from lpass too
        config = File.join(ENV["HOME"], ".ssh", "config")
        unless File.exists?(config)
            File.open(config, 'w') do |f|
                f.write("Host *\n")
                f.write("\tAddKeysToAgent yes\n")
                f.write("\tUseKeychain yes\n")
                f.write("\tIdentityFile ~/.ssh/id_rsa\n")
            end
        end
        File.chmod(0600, config)
    end

    def initialize()
        print "LastPass Email: "
        email = gets.chomp
        abort "Must provide login to continue!" unless email != ""
        run('lpass', 'login', email) || …

        list = capture_system 'lpass','ls','SysConfig'
        found = false
        secure_env = ""
        list.scan(/^SysConfig\/(.*?) \[id: (\d+)\]$/m) do |match|
            (name,id) = match
            if name == "Primary SSH Key"
                provision_sshkey(id)
            elsif name == "Secure Env Vars"
                result = capture_system 'lpass', 'show', id
                if result =~ /Notes:\W+(.*?)\Z/m
                    File.open(File.join(CONFIG_DIR,'zsh','secure_env.zsh'),'w') do |f|
                        f.write($1)
                    end
                end
            elsif name =~ /\ASSH Key \((.*?)\)\Z/
                provision_sshkey(id,$1)
            elsif name == "FileVault"
                #lpass show {id} | sed -r -n 's/Notes:\s+(.*?)$/\1/p' | tr -d '\n' | openssl base64 -d -A > /Library/Keychains/FileVaultMaster.keychain
            elsif name =~ /\Alicense\((.*?)\)\Z/
                #how do we organize this data? BetterTouchTool has a file extension
                #other licences are text based
            end
            found = true
        end
        abort "No secure notes found in list SysConfig group on LastPass" unless found

    end

end
# defaults write ~/Library/Preferences/com.apple.AppStore.plist ASAcknowledgedOnboardingVersion -int 1

# osascript <<EOF
# tell application "App Store"
#     try
#         activate
#         delay 5
#     end try
# end tell
# tell application "System Events"
#     tell process "App Store"
#         set frontmost to true
#         delay 2
#         ### on first run when installing the appstore asks for accepting privacy policy
#         try
#             click button 2 of UI element 1 of sheet 1 of window 1
#             #click button "Weiter" of UI element 1 of sheet 1 of window 1
#             delay 3
#         end try
#         ### login
#         click menu item 15 of menu "Store" of menu bar item "Store" of menu bar 1
#         #click menu item "Anmelden" of menu "Store" of menu bar item "Store" of menu bar 1
#         delay 2
#         tell application "System Events" to keystroke "$MAS_APPLE_ID"
#         delay 2
#         tell application "System Events" to keystroke return
#         delay 2
#         tell application "System Events" to keystroke "$MAS_APPSTORE_PASSWORD"
#         delay 2
#         tell application "System Events" to keystroke return
#     end tell
# end tell

# tell application "App Store"
#     try
#         delay 10
#         quit
#     end try
# end tell

# EOF

# echo "the app store has to be quit before continuing..."
# while ps aux | grep 'App Store.app' | grep -v grep > /dev/null; do sleep 1; done
# echo ''

def getc
    system "/bin/stty raw -echo"
    if STDIN.respond_to?(:getbyte)
        STDIN.getbyte
    else
        STDIN.getc
    end
ensure
    system "/bin/stty -raw echo"
end

class Version
    include Comparable
    attr_reader :parts

    def initialize(str)
        @parts = str.split(".").map { |p| p.to_i }
    end

    def <=>(other)
        parts <=> self.class.new(other).parts
    end
end

def macos_version
    @macos_version ||= Version.new(`/usr/bin/sw_vers -productVersion`.chomp[/10\.\d+/])
end

def should_install_homebrew?
    !File.exist?("/usr/local/bin/brew")
end

def git
    @git ||=
        if ENV["GIT"] && File.executable?(ENV["GIT"])
            ENV["GIT"]
        elsif run "/usr/bin/which -s git"
            "git"
        else
            exe = `xcrun -find git 2>/dev/null`.chomp
            exe if $? && $?.success? && !exe.empty? && File.executable?(exe)
        end

    return unless @git
    # Github only supports HTTPS fetches on 1.7.10 or later:
    # https://help.github.com/articles/https-cloning-errors
    `#{@git} --version` =~ /git version (\d\.\d+\.\d+)/
    return if $1.nil?
    return if Version.new($1) < "1.7.10"

    @git
end

def mkdir_p(mode,dir)
    if Dir.exists?(dir)
        if File.stat(dir).to_s()[3..5] != "700"
            ohai "Fixing permissions on #{dir}"
            abort "Cound't chmod #{dir}" unless File.chmod(0700,dir)
        end
        #sudo "/usr/sbin/chown", ENV["USER"], dir if chown?(dir)
        #sudo "/usr/bin/chgrp", "staff", dir if chgrp?(dir)
    else
        ohai "Creating #{dir}"
        about "Couldn't create #{dir}" unless Dir.mkdir(dir, 0700)
    end
end

# Avoid reprompting for sudo password
run "/usr/bin/sudo -n -v 2>/dev/null"

# But invalidate sudo timestamp before exiting
at_exit { run "/usr/bin/sudo", "-k" } unless $?.success?

# The block form of Dir.chdir fails if Dir.CWD doesn't exist.
Dir.chdir "/usr"

#TODO work for linux as well
RUBY_PLATFORM.to_s.downcase.include?("linux") &&
    abort "This is the macOS installer, not Linux!"

abort "Mac OS X too old" if macos_version < "10.5"
abort "Don't run install as root!" if Process.uid.zero?

`dsmemberutil checkmembership -U "#{ENV["USER"]}" -G admin`.include?('is a')||
    abort "This installer can only be ran by an Administrator."


if install_homebrew? && !run("/usr/bin/ruby","-e",`curl -fsSL #{HB}`)
    abort "Can't proceed! Homebrew not installed."
end

mkdir_p(0700,SSH_DIR)       #TODO mkdir_p from stackoverflow notes
mkdir_p(0700,PROJECT_DIR)

unless Dir.exists?( CONFIG_DIR )
    Dir.chdir(PROJECT_DIR) do
        system 'git', 'clone', 'git@bitbucket.org:sdhall/dotfiles.git'
    end
end

Dir.chdir(CONFIG_DIR) do
    ohai "Brewing…"

    system 'brew', 'update' # Make sure we’re using the latest Homebrew.
    system 'brew', 'upgrade' # Upgrade any already-installed formulae.

    #pin the tap so we use 1.4.2
    system 'brew', 'tap', 'mas-cli/tap'
    system 'brew', 'tap-pin', 'mas-cli/tap'
    system 'brew', 'install', 'mas'
    #unpin with brew tap-unpin mas-cli/tap once homebrew core has 1.4.2+

    # `brew bundle` will invoke the mas CLI to install from App Store
    # but mas 1.4.2 still has a bug and the work around is to invoke
    # a bit of applescript to login via the GUI

    # SCRIPT HERE

    system 'brew', 'bundle'  # Install everything in the Brewfile
    system 'brew', 'cleanup' # Remove outdated versions from the cellar.

    #make the symlinks and source XDG env vars
    #these will be expected by the install scripts
    system "/usr/bin/env", "bash", "init/xdg_env"



    ohai "LastPass Login"

    #Lets make LPASS a class interface and loop the request for email
    #asking if they are sure they want to skip LASTPASS setup
    #should print a banner and explain lastpass part in case I share
    #my repo or some sad soul finds it
    LPassInterface()

    #this is python stupid, do ruby…
    for installer in glob.glob("**/install.sh"):
            ohai "Running install script for %s"
        system installer

    end

    ohai "Installation successful!"
    puts
    ohai "Don't forget to manually install:"

    #also (mostly) python dumb dumb...
    for app in ("Adobe Photoshop", "Adobe Illustrator", "Adobe Acrobat DC",
            "Adobe InDesign", "CleanMyMac X", "Sidify Apple Music Converter" )
        puts "\t#{Tty.bold}• #{app}#{Tty.reset}"
    end

    puts
    # Use the shell's audible bell.
    print "\a"
