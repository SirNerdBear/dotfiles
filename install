#!/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby
# A lot of this was copied from the homebrew install script
require 'open3'

SSH_DIR = "#{ENV["HOME"]}/.ssh".freeze
CONFIG_DIR = "#{ENV["HOME"]}/dotfiles".freeze
HB="https://raw.githubusercontent.com/Homebrew/install/master/install".freeze


#*******************************************************************************************************
#TODO better read me
#TODO adept to work with linux Ubuntu and PopOS
#TODO adept to have a Windows version that reuses as much as possible
#TODO also support wdl win subsystem
#TODO Makefile or such to update extensions, copy fonts and upload, update ssh/gpg keys into lpass, etc.
#TODO start working on tmux and neovim again
#*******************************************************************************************************


class Array
    def shell_s
        cp = dup
        first = cp.shift
        cp.map { |arg| arg.gsub " ", "\\ " }.unshift(first).join(" ")
    end
end

def ohai(*args)
    puts "\e[34m;==>\e[1m #{args.shell_s}\e[0m"
end

def capture_system(*args)
    stdout, stderr, status = Open3.capture3(*args)
    abort "Failed during: #{args.shell_s}" unless status
    stdout
end

def system(*args)
    abort "Failed during: #{args.shell_s}" unless Kernel.system(*args)
end

def run(*args)
    return Kernel.system(*args)
end

def sudo(*args)
    args.unshift("-A") unless ENV["SUDO_ASKPASS"].nil?
    ohai "/usr/bin/sudo", *args
    system "/usr/bin/sudo", *args
end

def install_homebrew?
    !File.exist?("/usr/local/bin/brew")
end

def mkdir_p(mode,dir)
    if Dir.exists?(dir)
        if File.stat(dir).to_s()[3..5] != "700"
            ohai "Fixing permissions on #{dir}"
            abort "Cound't chmod #{dir}" unless File.chmod(0700,dir)
        end
        #sudo "/usr/sbin/chown", ENV["USER"], dir if chown?(dir)
        #sudo "/usr/bin/chgrp", "staff", dir if chgrp?(dir)
    else
        ohai "Creating #{dir}"
        about "Couldn't create #{dir}" unless Dir.mkdir(dir, 0700)
    end
end

def name_computer
    ohai "Computer name is #{`hostname`}"
    ohai "Computer Name (Leave Blank to Skip):"
    computer_name = gets.chomp
    return if computer_name == ""
    sudo "scutil","--set","ComputerName", computer_name
    sudo "scutil","--set","HostName", computer_name
    sudo "scutil","--set","LocalHostName", computer_name
    plist = '/Library/Preferences/SystemConfiguration/com.apple.smb.server'
    sudo "defaults","write", plist, "NetBIOSName", "-string", computer_name
end


def brewfile
    # Brew file will install everything for homebrew and casks for most of my apps
    Dir.chdir(CONFIG_DIR) do
        ohai "Running Brewfile"
    
        system 'brew', 'bundle'  # Install everything in the Brewfile
        system 'brew', 'cleanup' # Remove outdated versions from the cellar.

        ohai "Running post install scripts"
        for installer in glob.glob("**/install.sh")
            ohai "Running install script for %s"
            system installer
        end
    end
end

def provision_gpg(id,name=nil)
    file = (name || "id").downcase() + "_ed25519"
    pub_file = file + ".pub"
    cred = capture_system 'lpass','show',id
    if cred =~ /Private Key: +(.*?-----END PGP PRIVATE KEY BLOCK-----)/m
        File.open(File.join(SSH_DIR,file),'w') do |f|
	        f.write($1)
            f.write("\n")
        end
        File.chmod(0600, File.join(SSH_DIR,file))
    end
    if cred =~ /Public Key: +(.*?-----END PGP PUBLIC KEY BLOCK-----)/m
        File.open(File.join(SSH_DIR,pub_file),'w') do |f|
	        f.write($1)
            f.write("\n")
        end
        File.chmod(0600, File.join(SSH_DIR,pub_file))
    end
end

def provision_sshkey(id,name=nil)
    file = (name || "id") + "_rsa"
    pub_file = file + ".pub"
    cred = capture_system 'lpass','show',id
    if cred =~ /Private Key: +(.*?-----END RSA PRIVATE KEY-----)/m
        File.open(File.join(SSH_DIR,file),'w') do |f|
	        f.write($1)
            f.write("\n")
        end
        File.chmod(0600, File.join(SSH_DIR,file))
    end
    if cred =~ /Public Key: +(.*?)$/m
        File.open(File.join(SSH_DIR,pub_file),'w') do |f|
	        f.write($1)
            f.write("\n")
        end
        File.chmod(0600, File.join(SSH_DIR,pub_file))
    end
end


def secure_restore
    ohai "Getting secure config items from LastPass"

    # If not logged into lpass prompt for login now
    status = capture_system 'lpass','status'
    if status =~ /Not logged in/m
        ohai "Login to LastPass to Retrieve SSH Keys"
        print "LastPass Login Email: "
        email = gets.chomp
        abort "Must provide login to continue!" unless email != ""
        system 'lpass', 'login', email
    end

    list = capture_system 'lpass','ls','SysConfig'
    list.scan(/^SysConfig\/(.*?) \[id: (\d+)\]$/m) do |match|
        (name,id) = match
        if name =~ /SSH Key *\(?(.*?)\)?$/
            if $1 != ""
                ohai "Adding SSH key: #{$1}"
                provision_sshkey(id,$1)
            else
                ohai "Adding Primary SSH Key"
                provision_sshkey(id)
            end 
        elsif name == "SSH Config"
            result = capture_system 'lpass', 'show', id
            if result =~ /Notes: +(.*?)\Z/m
                config = File.join(ENV["HOME"], ".ssh", "config")
                unless File.exists?(config)
                    File.open(config, 'w') do |f|
                        f.write($1)
                    end
                end
                File.chmod(0600, config)
            end
        elsif name =~ /^GPG *\(?(.*?)\)?$/
            if $1 != ""
                ohai "Adding GPG key: #{$1}"
                provision_gpg(id,$1)
            else
                ohai "Adding Primary GPG key"
                provision_gpg(id)
            end
        elsif name == "Trust DB GPG"
            result = capture_system 'lpass', 'show', id
            if result =~ /Notes: +(.*?)\Z/m
                ohai "Copying trust DB backup"
                fn = File.join(CONFIG_DIR,"init","trustdb.txt")
                File.open(fn,'w') do |f|
                    f.write($1)
                end
                File.chmod(0600, fn)
            end
        elsif name == "Secure Env Vars"
            result = capture_system 'lpass', 'show', id
            if result =~ /Notes:\W+(.*?)\Z/m
                #this breaks on systems that don't have this dir yet
                ohai "Setting up secure local env vars"
                File.open(File.join(CONFIG_DIR,'zsh','secure_env.zsh'),'w') do |f|
                    f.write($1)
                end
            end
        elsif name == "DBXcli"
            result = capture_system 'lpass', 'show', id
            if result =~ /Notes:\W+(.*?)\Z/m
                #this breaks on systems that don't have this dir yet
                ohai "Copy auth token for dbxcli"
                auth_file = File.join(CONFIG_DIR,'dbxcli','auth.json')
                File.open(auth_file,'w') do |f|
                    f.write($1)
                end
                File.chmod(0600, auth_file)
            end
            #TODO get this from lpass, it's a simple json file
            #make sure it's 600 for the file and 700 for the dbxcli directory inside of .config
            #https://github.com/dropbox/dbxcli/issues/130 the toke in the auth.json file should last forever

        elsif name == "FileVault"
            unless File.exists?('/Library/Keychains/FileVaultMaster.keychain')
                `lpass show #{id} | gsed -r 's/Notes:\s+(.*?)$/\1/p' | tr -d '\n' | openssl base64 -d -A > #{CONFIG_DIR}/init/FileVaultMaster.keychain`
            end
        end
        #TODO need a method to update lpass with new/edited SSH keys and GPG keys, etc
    end
end

ohai "Build bootstrap script"
ohai "**********************"

if `uname -m` =~ /x86_64/
    ohai "x86_64 CPU Architecture Detected"
else
    ohai "ARM CPU Architecture Detected, M1"
end
#uname -m
#It should say arm64 if you are on an M1 Mac. If it says x86_4, that means Terminal is in Rosetta mode.

# Avoid reprompting for sudo password
run "/usr/bin/sudo -n -v 2>/dev/null"

# But invalidate sudo timestamp before exiting
at_exit { run "/usr/bin/sudo", "-k" } unless $?.success?

# The block form of Dir.chdir fails if Dir.CWD doesn't exist
Dir.chdir "/usr"

#darwin for macos
RUBY_PLATFORM.to_s.downcase.include?("linux") and abort "This is the macOS installer, not Linux!"

abort "Don't run install as root!" if Process.uid.zero?

`dsmemberutil checkmembership -U "#{ENV["USER"]}" -G admin`.include? 'is a' or
    abort "This installer can only be ran by an Administrator."

name_computer()

if install_homebrew? && !run("/usr/bin/ruby","-e",`curl -fsSL #{HB}`)
    abort "Can't proceed! Homebrew not installed."
end

mkdir_p(0700,SSH_DIR)

unless Dir.exists?( CONFIG_DIR )
    Dir.chdir(ENV["HOME"]) do
        system 'git', 'clone', 'git@bitbucket.org:sdhall/dotfiles.git'
    end
end

Dir.chdir(CONFIG_DIR) do
    Dir.glob('*').each do |f|
        mode = ( File.directory?(f) ? 0700 : 0600 )
        File.chmod(mode, f)
    end
end

ohai "Brewing…"

#system 'brew', 'update' # Make sure we’re using the latest Homebrew.
# system 'brew', 'upgrade' # Upgrade any already-installed formulae.

# system 'brew', 'install', 'lastpass-cli', 'gnu-sed' #needed for this script, before Brewfile runs

#make the symlinks and setup XDG env vars
#these will be expected by the install scripts
Dir.chdir(CONFIG_DIR) do
    system("source init/xdg_env 2>&1")
end

secure_restore()

# brewfile()

ohai "Installation successful!"
puts
ohai "Don't forget to manually install Adobe programs from the Creative Cloud app"

puts "\e[0m"

# Use the shell's audible bell.
print "\a"