#!/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby
# A lot of this was copied from the homebrew install script
require 'open3'

SSH_DIR = "#{ENV["HOME"]}/.ssh".freeze
PROJECT_DIR = "#{ENV["HOME"]}/Projects".freeze
CONFIG_DIR = "#{ENV["HOME"]}/Projects/dotfiles".freeze
HB="https://raw.githubusercontent.com/Homebrew/install/master/install".freeze

class Array
    def shell_s
        cp = dup
        first = cp.shift
        cp.map { |arg| arg.gsub " ", "\\ " }.unshift(first).join(" ")
    end
end

def ohai(*args)
    puts "\e[34m;==>\e[1m #{args.shell_s}\e[0m"
end

def capture_system(*args)
    stdout, stderr, status = Open3.capture3(*args)
    abort "Failed during: #{args.shell_s}" unless status
    stdout
end

def system(*args)
    abort "Failed during: #{args.shell_s}" unless Kernel.system(*args)
end

def run(*args)
    return Kernel.system(*args)
end

def sudo(*args)
    args.unshift("-A") unless ENV["SUDO_ASKPASS"].nil?
    ohai "/usr/bin/sudo", *args
    system "/usr/bin/sudo", *args
end

def install_homebrew?
    !File.exist?("/usr/local/bin/brew")
end

def mkdir_p(mode,dir)
    if Dir.exists?(dir)
        if File.stat(dir).to_s()[3..5] != "700"
            ohai "Fixing permissions on #{dir}"
            abort "Cound't chmod #{dir}" unless File.chmod(0700,dir)
        end
        #sudo "/usr/sbin/chown", ENV["USER"], dir if chown?(dir)
        #sudo "/usr/bin/chgrp", "staff", dir if chgrp?(dir)
    else
        ohai "Creating #{dir}"
        about "Couldn't create #{dir}" unless Dir.mkdir(dir, 0700)
    end
end

def name_computer
    puts "Computer Name (Leave Blank to Skip):"
    computer_name = gets.chomp
    return if computer_name == ""
    sudo "scutil","--set","ComputerName", computer_name
    sudo "scutil","--set","HostName", computer_name
    sudo "scutil","--set","LocalHostName", computer_name
    plist = '/Library/Preferences/SystemConfiguration/com.apple.smb.server'
    sudo "defaults","write", plist, "NetBIOSName", "-string", computer_name
end


# Avoid reprompting for sudo password
run "/usr/bin/sudo -n -v 2>/dev/null"

# But invalidate sudo timestamp before exiting
at_exit { run "/usr/bin/sudo", "-k" } unless $?.success?

# The block form of Dir.chdir fails if Dir.CWD doesn't exist
Dir.chdir "/usr"

name_computer
exit
#TODO work for linux as well
#darwin for macos
RUBY_PLATFORM.to_s.downcase.include?("linux") and
    abort "This is the macOS installer, not Linux!"

abort "Don't run install as root!" if Process.uid.zero?

`dsmemberutil checkmembership -U "#{ENV["USER"]}" -G admin`.include? 'is a' or
    abort "This installer can only be ran by an Administrator."


if install_homebrew? && !run("/usr/bin/ruby","-e",`curl -fsSL #{HB}`)
    abort "Can't proceed! Homebrew not installed."
end

mkdir_p(0700,SSH_DIR)       #TODO mkdir_p from stackoverflow notes
mkdir_p(0700,PROJECT_DIR)

unless Dir.exists?( CONFIG_DIR )
    Dir.chdir(PROJECT_DIR) do
        system 'git', 'clone', 'git@bitbucket.org:sdhall/dotfiles.git'
    end
end

ohai "Brewing…"

system 'brew', 'update' # Make sure we’re using the latest Homebrew.
system 'brew', 'upgrade' # Upgrade any already-installed formulae.

system 'brew', 'install', 'lastpass-cli'

Dir.chdir(CONFIG_DIR) do
    ohai "Running Brewfile"

    system 'brew', 'bundle'  # Install everything in the Brewfile
    system 'brew', 'cleanup' # Remove outdated versions from the cellar.

    #make the symlinks and setup XDG env vars
    #these will be expected by the install scripts
    system "source", "init/xdg_env"

    for installer in glob.glob("**/install.sh")
        ohai "Running install script for %s"
        system installer

        config = File.join(ENV["HOME"], ".ssh", "config")
    unless File.exists?(config)
    File.open(config, 'w') do |f|
        f.write("Host *\n")
        f.write("\tAddKeysToAgent yes\n")
        f.write("\tUseKeychain yes\n")
        f.write("\tIdentityFile ~/.ssh/id_rsa\n")
    end
end
File.chmod(0600, config)

ohai "Login to LastPass to Retrieve SSH Keys"

print "LastPass Login Email: "
email = gets.chomp
abort "Must provide login to continue!" unless email != ""
system 'lpass', 'login', email

#lpass show {id} | sed -r -n 's/Notes:\s+(.*?)$/\1/p' | tr -d '\n' | openssl base64 -d -A > /Library/Keychains/FileVaultMaster.keychain

list = capture_system 'lpass','ls','SysConfig'
found = false
secure_env = ""
list.scan(/^SysConfig\/(.*?) \[id: (\d+)\]$/m) do |match|
  (name,id) = match
  if name == "Primary SSH Key"
    provision_sshkey(id)
  elsif name == "Secure Env Vars"
    result = capture_system 'lpass', 'show', id
    if result =~ /Notes:\W+(.*?)\Z/m
      #this breaks on systems that don't have this dir yet
      File.open(File.join(CONFIG_DIR,'zsh','secure_env.zsh'),'w') do |f|
	f.write($1)
      end
    end

    ohai "Installation successful!"
    puts
    ohai "Don't forget to manually install:\e[1m"

    ["Adobe Photoshop", "Adobe Illustrator", "Adobe Acrobat DC",
     "Adobe InDesign","Adobe After Effects", "Adobe Premiere",
     "Adobe Audition", "Numbers","Pages","Keynote",
     "XCode", "The Archive Browser", "The Unarchiver"
    ].each |app| do
        puts "\t• #{app}"
    end

    puts "\e[0m"
end

# Use the shell's audible bell.
print "\a"
